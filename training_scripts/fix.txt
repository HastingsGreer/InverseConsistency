************* Module 1d_example
1d_example.py:33:0: C0301: Line too long (116/100) (line-too-long)
1d_example.py:1:0: C0103: Module name "1d_example" doesn't conform to snake_case naming style (invalid-name)
1d_example.py:1:0: C0114: Missing module docstring (missing-module-docstring)
1d_example.py:1:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
1d_example.py:2:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
1d_example.py:3:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
1d_example.py:4:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
1d_example.py:5:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
1d_example.py:6:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
1d_example.py:19:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
1d_example.py:21:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
1d_example.py:22:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
1d_example.py:25:0: C0103: Constant name "lmbda" doesn't conform to UPPER_CASE naming style (invalid-name)
1d_example.py:35:17: E1101: Module 'torch' has no 'mean' member (no-member)
1d_example.py:56:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
1d_example.py:61:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
1d_example.py:72:17: C0103: Argument name "im" doesn't conform to snake_case naming style (invalid-name)
1d_example.py:72:8: C0116: Missing function or method docstring (missing-function-docstring)
1d_example.py:11:0: C0411: standard import "import random" should be placed before "import icon_registration.data as data" (wrong-import-order)
1d_example.py:12:0: C0411: standard import "import os" should be placed before "import icon_registration.data as data" (wrong-import-order)
1d_example.py:13:0: C0411: standard import "import pickle" should be placed before "import icon_registration.data as data" (wrong-import-order)
************* Module 2d_triangles_example_ncc
2d_triangles_example_ncc.py:1:0: C0103: Module name "2d_triangles_example_ncc" doesn't conform to snake_case naming style (invalid-name)
2d_triangles_example_ncc.py:1:0: C0114: Missing module docstring (missing-module-docstring)
2d_triangles_example_ncc.py:1:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
2d_triangles_example_ncc.py:2:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
2d_triangles_example_ncc.py:3:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
2d_triangles_example_ncc.py:4:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
2d_triangles_example_ncc.py:5:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
2d_triangles_example_ncc.py:6:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
2d_triangles_example_ncc.py:16:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
2d_triangles_example_ncc.py:18:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
2d_triangles_example_ncc.py:21:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
2d_triangles_example_ncc.py:26:0: C0103: Constant name "lmbda" doesn't conform to UPPER_CASE naming style (invalid-name)
2d_triangles_example_ncc.py:54:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
2d_triangles_example_ncc.py:59:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
2d_triangles_example_ncc.py:10:0: C0411: standard import "import random" should be placed before "import icon_registration.data as data" (wrong-import-order)
2d_triangles_example_ncc.py:11:0: C0411: standard import "import os" should be placed before "import icon_registration.data as data" (wrong-import-order)
2d_triangles_example_ncc.py:12:0: C0411: standard import "import pickle" should be placed before "import icon_registration.data as data" (wrong-import-order)
************* Module 2d_triangles_example
2d_triangles_example.py:32:0: C0301: Line too long (116/100) (line-too-long)
2d_triangles_example.py:1:0: C0103: Module name "2d_triangles_example" doesn't conform to snake_case naming style (invalid-name)
2d_triangles_example.py:1:0: C0114: Missing module docstring (missing-module-docstring)
2d_triangles_example.py:14:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
2d_triangles_example.py:16:9: E0602: Undefined variable 'data' (undefined-variable)
2d_triangles_example.py:19:13: E0602: Undefined variable 'data' (undefined-variable)
2d_triangles_example.py:24:0: C0103: Constant name "lmbda" doesn't conform to UPPER_CASE naming style (invalid-name)
2d_triangles_example.py:31:46: E0602: Undefined variable 'networks' (undefined-variable)
2d_triangles_example.py:34:17: E1101: Module 'torch' has no 'mean' member (no-member)
2d_triangles_example.py:47:17: E0602: Undefined variable 'train' (undefined-variable)
2d_triangles_example.py:54:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
2d_triangles_example.py:59:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
2d_triangles_example.py:68:8: E0602: Undefined variable 'visualize' (undefined-variable)
2d_triangles_example.py:83:4: E0602: Undefined variable 'visualize' (undefined-variable)
************* Module 2d_triangles_shift
2d_triangles_shift.py:1:0: C0103: Module name "2d_triangles_shift" doesn't conform to snake_case naming style (invalid-name)
2d_triangles_shift.py:1:0: C0114: Missing module docstring (missing-module-docstring)
2d_triangles_shift.py:1:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
2d_triangles_shift.py:2:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
2d_triangles_shift.py:3:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
2d_triangles_shift.py:4:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
2d_triangles_shift.py:5:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
2d_triangles_shift.py:6:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
2d_triangles_shift.py:17:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
2d_triangles_shift.py:19:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
2d_triangles_shift.py:22:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
2d_triangles_shift.py:27:0: C0103: Constant name "lmbda" doesn't conform to UPPER_CASE naming style (invalid-name)
2d_triangles_shift.py:34:4: E1101: Module 'icon_registration.network_wrappers' has no 'DoubleNet' member (no-member)
2d_triangles_shift.py:38:17: E1101: Module 'torch' has no 'mean' member (no-member)
2d_triangles_shift.py:58:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
2d_triangles_shift.py:63:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
2d_triangles_shift.py:10:0: C0411: standard import "import random" should be placed before "import icon_registration.data as data" (wrong-import-order)
2d_triangles_shift.py:11:0: C0411: standard import "import os" should be placed before "import icon_registration.data as data" (wrong-import-order)
2d_triangles_shift.py:12:0: C0411: standard import "import pickle" should be placed before "import icon_registration.data as data" (wrong-import-order)
************* Module affine_deformable_triangles
affine_deformable_triangles.py:1:0: C0114: Missing module docstring (missing-module-docstring)
affine_deformable_triangles.py:4:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
affine_deformable_triangles.py:5:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
affine_deformable_triangles.py:6:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
affine_deformable_triangles.py:7:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
affine_deformable_triangles.py:8:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
affine_deformable_triangles.py:15:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
affine_deformable_triangles.py:16:0: C0103: Constant name "data_size" doesn't conform to UPPER_CASE naming style (invalid-name)
affine_deformable_triangles.py:17:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
affine_deformable_triangles.py:20:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
affine_deformable_triangles.py:27:4: E1101: Module 'icon_registration.network_wrappers' has no 'DoubleNet' member (no-member)
affine_deformable_triangles.py:33:17: E1101: Module 'torch' has no 'mean' member (no-member)
affine_deformable_triangles.py:51:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
affine_deformable_triangles.py:51:0: C0413: Import "import icon_registration.train as train" should be placed at the top of the module (wrong-import-position)
affine_deformable_triangles.py:64:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
affine_deformable_triangles.py:69:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
affine_deformable_triangles.py:98:11: E0602: Undefined variable 'optimizer' (undefined-variable)
affine_deformable_triangles.py:1:0: W0611: Unused OrderedDict imported from collections (unused-import)
affine_deformable_triangles.py:10:0: C0411: standard import "import os" should be placed before "import torch" (wrong-import-order)
affine_deformable_triangles.py:12:0: C0411: standard import "import random" should be placed before "import torch" (wrong-import-order)
affine_deformable_triangles.py:13:0: C0411: standard import "import pickle" should be placed before "import torch" (wrong-import-order)
affine_deformable_triangles.py:51:0: C0412: Imports from package icon_registration are not grouped (ungrouped-imports)
************* Module affine_triangles_pretrain
affine_triangles_pretrain.py:1:0: C0114: Missing module docstring (missing-module-docstring)
affine_triangles_pretrain.py:1:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
affine_triangles_pretrain.py:4:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
affine_triangles_pretrain.py:5:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
affine_triangles_pretrain.py:6:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
affine_triangles_pretrain.py:7:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
affine_triangles_pretrain.py:14:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
affine_triangles_pretrain.py:15:0: C0103: Constant name "data_size" doesn't conform to UPPER_CASE naming style (invalid-name)
affine_triangles_pretrain.py:16:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
affine_triangles_pretrain.py:19:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
affine_triangles_pretrain.py:27:17: E1101: Module 'torch' has no 'mean' member (no-member)
affine_triangles_pretrain.py:33:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
affine_triangles_pretrain.py:33:0: C0413: Import "import icon_registration.train as train" should be placed at the top of the module (wrong-import-position)
affine_triangles_pretrain.py:46:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
affine_triangles_pretrain.py:51:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
affine_triangles_pretrain.py:80:11: E0602: Undefined variable 'optimizer' (undefined-variable)
affine_triangles_pretrain.py:9:0: C0411: standard import "import os" should be placed before "import icon_registration.network_wrappers as network_wrappers" (wrong-import-order)
affine_triangles_pretrain.py:11:0: C0411: standard import "import random" should be placed before "import icon_registration.network_wrappers as network_wrappers" (wrong-import-order)
affine_triangles_pretrain.py:12:0: C0411: standard import "import pickle" should be placed before "import icon_registration.network_wrappers as network_wrappers" (wrong-import-order)
affine_triangles_pretrain.py:4:0: C0412: Imports from package icon_registration are not grouped (ungrouped-imports)
affine_triangles_pretrain.py:33:0: C0412: Imports from package icon_registration are not grouped (ungrouped-imports)
************* Module double_deformable_triangles
double_deformable_triangles.py:1:0: C0114: Missing module docstring (missing-module-docstring)
double_deformable_triangles.py:4:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
double_deformable_triangles.py:5:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
double_deformable_triangles.py:6:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
double_deformable_triangles.py:7:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
double_deformable_triangles.py:8:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
double_deformable_triangles.py:15:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
double_deformable_triangles.py:16:0: C0103: Constant name "data_size" doesn't conform to UPPER_CASE naming style (invalid-name)
double_deformable_triangles.py:17:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
double_deformable_triangles.py:20:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
double_deformable_triangles.py:27:4: E1101: Module 'icon_registration.network_wrappers' has no 'DoubleNet' member (no-member)
double_deformable_triangles.py:31:17: E1101: Module 'torch' has no 'mean' member (no-member)
double_deformable_triangles.py:39:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
double_deformable_triangles.py:39:0: C0413: Import "import icon_registration.train as train" should be placed at the top of the module (wrong-import-position)
double_deformable_triangles.py:52:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
double_deformable_triangles.py:57:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
double_deformable_triangles.py:87:11: E0602: Undefined variable 'optimizer' (undefined-variable)
double_deformable_triangles.py:1:0: W0611: Unused OrderedDict imported from collections (unused-import)
double_deformable_triangles.py:10:0: C0411: standard import "import os" should be placed before "import torch" (wrong-import-order)
double_deformable_triangles.py:12:0: C0411: standard import "import random" should be placed before "import torch" (wrong-import-order)
double_deformable_triangles.py:13:0: C0411: standard import "import pickle" should be placed before "import torch" (wrong-import-order)
double_deformable_triangles.py:39:0: C0412: Imports from package icon_registration are not grouped (ungrouped-imports)
************* Module retina_registration
retina_registration.py:1:0: C0114: Missing module docstring (missing-module-docstring)
retina_registration.py:2:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
retina_registration.py:5:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
retina_registration.py:6:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
retina_registration.py:7:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
retina_registration.py:8:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
retina_registration.py:15:0: C0116: Missing function or method docstring (missing-function-docstring)
retina_registration.py:26:4: W0621: Redefining name 'net' from outer scope (line 35) (redefined-outer-name)
retina_registration.py:21:20: E1101: Module 'icon_registration.network_wrappers' has no 'DoubleNet' member (no-member)
retina_registration.py:22:12: E1101: Module 'icon_registration.network_wrappers' has no 'DownsampleNet' member (no-member)
retina_registration.py:5:0: C0412: Imports from package icon_registration are not grouped (ungrouped-imports)
************* Module stability_exploration
stability_exploration.py:52:0: C0301: Line too long (136/100) (line-too-long)
stability_exploration.py:1:0: C0114: Missing module docstring (missing-module-docstring)
stability_exploration.py:1:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
stability_exploration.py:2:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
stability_exploration.py:3:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
stability_exploration.py:4:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
stability_exploration.py:5:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
stability_exploration.py:6:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
stability_exploration.py:18:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
stability_exploration.py:26:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
stability_exploration.py:29:17: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
stability_exploration.py:54:37: E1101: Module 'torch' has no 'mean' member (no-member)
stability_exploration.py:77:45: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
stability_exploration.py:82:45: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
stability_exploration.py:11:0: C0411: standard import "import random" should be placed before "import icon_registration.data as data" (wrong-import-order)
stability_exploration.py:12:0: C0411: standard import "import os" should be placed before "import icon_registration.data as data" (wrong-import-order)
stability_exploration.py:13:0: C0411: standard import "import pickle" should be placed before "import icon_registration.data as data" (wrong-import-order)
************* Module transformer_registration
transformer_registration.py:1:0: C0114: Missing module docstring (missing-module-docstring)
transformer_registration.py:32:8: C0103: Attribute name "t" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:5:0: C0115: Missing class docstring (missing-class-docstring)
transformer_registration.py:8:8: R1725: Consider using Python 3 style super() without arguments (super-with-arguments)
transformer_registration.py:11:47: E1101: Module 'torch' has no 'randn' member (no-member)
transformer_registration.py:34:22: C0103: Argument name "x" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:34:25: C0103: Argument name "y" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:34:4: C0116: Missing function or method docstring (missing-function-docstring)
transformer_registration.py:34:22: W0621: Redefining name 'x' from outer scope (line 111) (redefined-outer-name)
transformer_registration.py:34:25: W0621: Redefining name 'y' from outer scope (line 109) (redefined-outer-name)
transformer_registration.py:43:32: C0103: Argument name "a" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:43:4: C0116: Missing function or method docstring (missing-function-docstring)
transformer_registration.py:50:4: C0116: Missing function or method docstring (missing-function-docstring)
transformer_registration.py:51:8: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:53:8: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:54:8: C0103: Variable name "a" doesn't conform to snake_case naming style (invalid-name)
transformer_registration.py:58:0: R0402: Use 'from icon_registration import data' instead (consider-using-from-import)
transformer_registration.py:58:0: C0413: Import "import icon_registration.data as data" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:59:0: R0402: Use 'from icon_registration import networks' instead (consider-using-from-import)
transformer_registration.py:59:0: C0413: Import "import icon_registration.networks as networks" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:60:0: R0402: Use 'from icon_registration import network_wrappers' instead (consider-using-from-import)
transformer_registration.py:60:0: C0413: Import "import icon_registration.network_wrappers as network_wrappers" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:61:0: R0402: Use 'from icon_registration import visualize' instead (consider-using-from-import)
transformer_registration.py:61:0: C0413: Import "import icon_registration.visualize as visualize" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:62:0: R0402: Use 'from icon_registration import train' instead (consider-using-from-import)
transformer_registration.py:62:0: C0413: Import "import icon_registration.train as train" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:63:0: R0402: Use 'from icon_registration import inverseConsistentNet' instead (consider-using-from-import)
transformer_registration.py:63:0: C0413: Import "import icon_registration.inverseConsistentNet as inverseConsistentNet" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:64:0: C0413: Import "import numpy as np" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:65:0: W0404: Reimport 'torch' (imported line 1) (reimported)
transformer_registration.py:65:0: C0413: Import "import torch" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:66:0: C0413: Import "import matplotlib.pyplot as plt" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:67:0: C0413: Import "import random" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:68:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:69:0: C0413: Import "import pickle" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:71:0: C0413: Import "import footsteps" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:73:0: C0413: Import "import math" should be placed at the top of the module (wrong-import-position)
transformer_registration.py:76:0: C0103: Constant name "batch_size" doesn't conform to UPPER_CASE naming style (invalid-name)
transformer_registration.py:78:9: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
transformer_registration.py:81:13: E1124: Argument 'data_size' passed by position and keyword in function call (redundant-keyword-arg)
transformer_registration.py:86:0: C0103: Constant name "lmbda" doesn't conform to UPPER_CASE naming style (invalid-name)
transformer_registration.py:94:17: E1101: Module 'torch' has no 'mean' member (no-member)
transformer_registration.py:116:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
transformer_registration.py:121:39: W1309: Using an f-string that does not have any interpolated variables (f-string-without-interpolation)
transformer_registration.py:59:0: W0611: Unused icon_registration.networks imported as networks (unused-import)
transformer_registration.py:67:0: C0411: standard import "import random" should be placed before "import torch" (wrong-import-order)
transformer_registration.py:68:0: C0411: standard import "import os" should be placed before "import torch" (wrong-import-order)
transformer_registration.py:69:0: C0411: standard import "import pickle" should be placed before "import torch" (wrong-import-order)
transformer_registration.py:73:0: C0411: standard import "import math" should be placed before "import torch" (wrong-import-order)
transformer_registration.py:65:0: C0412: Imports from package torch are not grouped (ungrouped-imports)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==affine_deformable_triangles:[53:98]
==affine_triangles_pretrain:[35:80]
net.train().cuda()


xs = []
for _ in range(240):
    y = np.array(train.train2d(net, optim, d1, d2, epochs=50))
    xs.append(y)
    x = np.concatenate(xs)
    plt.title("Loss curve for " + type(net.regis_net).__name__)
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )

random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example:[34:88]
==2d_triangles_example_ncc:[34:88]
    lmbda,
)

input_shape = next(iter(d1))[0].size()
net.assign_identity_map(input_shape)
net.cuda()
optimizer = torch.optim.Adam(net.parameters(), lr=0.001)
net.train()


xs = []
for _ in range(40):
    y = np.array(train.train2d(net, optimizer, d1, d2, epochs=50))
    xs.append(y)
    x = np.concatenate(xs)
    plt.title(
        "Loss curve for " + type(net.regis_net).__name__ + " lambda=" + str(lmbda)
    )
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )

random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==affine_deformable_triangles:[30:85]
==double_deformable_triangles:[28:73]
        network_wrappers.FunctionFromVectorField(networks.tallUNet2(dimension=2)),
    ),
    lambda x, y: torch.mean((x - y) ** 2),
    700,
)

input_shape = next(iter(d1))[0].size()
net.assign_identity_map(input_shape)
net.cuda()

import icon_registration.train as train

optim = torch.optim.Adam(net.parameters(), lr=0.0001)
net.train().cuda()


xs = []
for _ in range(240):
    y = np.array(train.train2d(net, optim, d1, d2, epochs=50))
    xs.append(y)
    x = np.concatenate(xs)
    plt.title("Loss curve for " + type(net.regis_net).__name__)
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )
 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_shift:[56:92]
==affine_deformable_triangles:[62:98]
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )

random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[52:88]
==affine_triangles_pretrain:[44:80]
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )

random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[46:88]
==transformer_registration:[108:150]
    y = np.array(train.train2d(net, optimizer, d1, d2, epochs=50))
    xs.append(y)
    x = np.concatenate(xs)
    plt.title(
        "Loss curve for " + type(net.regis_net).__name__ + " lambda=" + str(lmbda)
    )
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )

random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[0:32]
==2d_triangles_shift:[0:33]
import icon_registration.data as data
import icon_registration.networks as networks
import icon_registration.network_wrappers as network_wrappers
import icon_registration.visualize as visualize
import icon_registration.train as train
import icon_registration.inverseConsistentNet as inverseConsistentNet
import numpy as np
import torch
import matplotlib.pyplot as plt
import random
import os
import pickle

import footsteps

batch_size = 128

d1, d2 = data.get_dataset_triangles(
    "train", data_size=50, hollow=False, batch_size=batch_size
)
d1_t, d2_t = data.get_dataset_triangles(
    "test", data_size=50, hollow=False, batch_size=batch_size
)


lmbda = 2048
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
print("=" * 50)
net = inverseConsistentNet.InverseConsistentNet( (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==affine_triangles_pretrain:[35:67]
==double_deformable_triangles:[41:73]
net.train().cuda()


xs = []
for _ in range(240):
    y = np.array(train.train2d(net, optim, d1, d2, epochs=50))
    xs.append(y)
    x = np.concatenate(xs)
    plt.title("Loss curve for " + type(net.regis_net).__name__)
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )
 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==affine_deformable_triangles:[0:27]
==double_deformable_triangles:[0:27]
from collections import OrderedDict
import torch
import numpy as np
import icon_registration.networks as networks
import icon_registration.network_wrappers as network_wrappers
import icon_registration.visualize as visualize
import icon_registration.inverseConsistentNet as inverseConsistentNet
import icon_registration.data as data
import footsteps
import os
import matplotlib.pyplot as plt
import random
import pickle

batch_size = 128
data_size = 50
d1, d2 = data.get_dataset_triangles(
    "train", data_size=data_size, hollow=True, batch_size=batch_size
)
d1_t, d2_t = data.get_dataset_triangles(
    "test", data_size=data_size, hollow=True, batch_size=batch_size
)

image_A, image_B = (x[0].cuda() for x in next(zip(d1, d2)))

net = inverseConsistentNet.InverseConsistentNet(
    network_wrappers.DoubleNet( (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[52:88]
==affine_deformable_triangles:[62:98]
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )

random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==affine_deformable_triangles:[5:26]
==affine_triangles_pretrain:[4:25]
import icon_registration.visualize as visualize
import icon_registration.inverseConsistentNet as inverseConsistentNet
import icon_registration.data as data
import footsteps
import os
import matplotlib.pyplot as plt
import random
import pickle

batch_size = 128
data_size = 50
d1, d2 = data.get_dataset_triangles(
    "train", data_size=data_size, hollow=True, batch_size=batch_size
)
d1_t, d2_t = data.get_dataset_triangles(
    "test", data_size=data_size, hollow=True, batch_size=batch_size
)

image_A, image_B = (x[0].cuda() for x in next(zip(d1, d2)))

net = inverseConsistentNet.InverseConsistentNet( (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[52:75]
==double_deformable_triangles:[50:73]
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N,
            footsteps.output_dir + f"epoch{_:03}" + "case" + str(N) + ".png",
        )
 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[49:68]
==2d_triangles_example_ncc:[47:66]
    xs.append(y)
    x = np.concatenate(xs)
    plt.title(
        "Loss curve for " + type(net.regis_net).__name__ + " lambda=" + str(lmbda)
    )
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t))) (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[0:17]
==stability_exploration:[0:19]
import icon_registration.data as data
import icon_registration.networks as networks
import icon_registration.network_wrappers as network_wrappers
import icon_registration.visualize as visualize
import icon_registration.train as train
import icon_registration.inverseConsistentNet as inverseConsistentNet

import numpy as np
import torch
import matplotlib.pyplot as plt
import random
import os
import pickle

import footsteps


batch_size = 128
 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_shift:[0:16]
==transformer_registration:[57:72]
import icon_registration.data as data
import icon_registration.networks as networks
import icon_registration.network_wrappers as network_wrappers
import icon_registration.visualize as visualize
import icon_registration.train as train
import icon_registration.inverseConsistentNet as inverseConsistentNet
import numpy as np
import torch
import matplotlib.pyplot as plt
import random
import os
import pickle

import footsteps
 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example:[13:29]
==2d_triangles_example_ncc:[15:31]
batch_size = 128

d1, d2 = data.get_dataset_triangles(
    "train", data_size=50, hollow=False, batch_size=batch_size
)
d1_t, d2_t = data.get_dataset_triangles(
    "test", data_size=50, hollow=False, batch_size=batch_size
)


lmbda = 2048
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
print("=" * 50) (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[0:16]
==2d_triangles_example_ncc:[0:15]
import icon_registration.data as data
import icon_registration.networks as networks
import icon_registration.network_wrappers as network_wrappers
import icon_registration.visualize as visualize
import icon_registration.train as train
import icon_registration.inverseConsistentNet as inverseConsistentNet

import numpy as np
import torch
import matplotlib.pyplot as plt
import random
import os
import pickle

import footsteps
 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example:[75:88]
==double_deformable_triangles:[74:87]
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[92:105]
==2d_triangles_example_ncc:[75:88]
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t)))
os.mkdir(footsteps.output_dir + "final/")
for N in range(30):
    visualize.visualizeRegistrationCompact(net, image_A, image_B, N)
    plt.savefig(footsteps.output_dir + f"final/{N}.png")
    plt.clf()

torch.save(net.state_dict(), footsteps.output_dir + "network.trch")
torch.save(optimizer.state_dict(), footsteps.output_dir + "opt.trch") (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[54:68]
==affine_deformable_triangles:[62:76]
    plt.plot(x[:, :3])
    plt.savefig(footsteps.output_dir + f"loss.png")
    plt.clf()
    plt.title("Log # pixels with negative Jacobian per epoch")
    plt.plot(x[:, 3])
    # random.seed(1)
    plt.savefig(footsteps.output_dir + f"lossj.png")
    plt.clf()
    with open(footsteps.output_dir + "loss.pickle", "wb") as f:
        pickle.dump(x, f)
    # torch.manual_seed(1)
    # torch.cuda.manual_seed(1)
    # np.random.seed(1)
    image_A, image_B = (x[0].cuda() for x in next(zip(d1_t, d2_t))) (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[34:45]
==transformer_registration:[94:107]
    lmbda,
)

input_shape = next(iter(d1))[0].size()
net.assign_identity_map(input_shape)
net.cuda()
optimizer = torch.optim.Adam(net.parameters(), lr=0.001)
net.train()


xs = [] (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_shift:[27:33]
==transformer_registration:[86:92]
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
print("=" * 50)
net = inverseConsistentNet.InverseConsistentNet( (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example:[33:40]
==stability_exploration:[53:60]
    lambda x, y: torch.mean((x[:, :1] - y[:, :1]) ** 2),
    lmbda,
)

input_shape = next(iter(d1))[0].size()
net.assign_identity_map(input_shape)
net.cuda() (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==2d_triangles_example_ncc:[66:72]
==retina_registration:[54:60]
    for N in range(3):
        visualize.visualizeRegistration(
            net,
            image_A,
            image_B,
            N, (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[40:48]
==2d_triangles_example_ncc:[38:46]
net.assign_identity_map(input_shape)
net.cuda()
optimizer = torch.optim.Adam(net.parameters(), lr=0.001)
net.train()


xs = []
for _ in range(40): (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[25:31]
==2d_triangles_example_ncc:[26:32]
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
print("=" * 50)
net = inverseConsistentNet.InverseConsistentNet( (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[40:47]
==transformer_registration:[98:107]
net.assign_identity_map(input_shape)
net.cuda()
optimizer = torch.optim.Adam(net.parameters(), lr=0.001)
net.train()


xs = []

 (duplicate-code)
transformer_registration.py:1:0: R0801: Similar lines in 2 files
==1d_example:[25:30]
==2d_triangles_example:[24:29]
random.seed(1)
torch.manual_seed(1)
torch.cuda.manual_seed(1)
np.random.seed(1)
print("=" * 50) (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 3.22/10 (previous run: 0.00/10, +3.22)

